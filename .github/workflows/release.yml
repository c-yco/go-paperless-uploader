name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags like v1.0.0
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: write
  packages: write

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Run gosec Security Scanner
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          # Run gosec and display results in console
          gosec -no-fail -fmt json -out gosec-results.json ./... || true
          gosec -no-fail -fmt text ./... || true
          
          # Generate SARIF for upload (may have compatibility issues)
          gosec -no-fail -fmt sarif -out gosec-results.sarif ./... || true

      - name: Upload gosec results as artifact
        uses: actions/upload-artifact@v4
        with:
          name: gosec-results
          path: gosec-results.json
        if: always()

      - name: Upload gosec SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gosec-results.sarif
        continue-on-error: true
        if: always()

      - name: Run govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.out
          fail_ci_if_error: false
        continue-on-error: true

  build:
    name: Build and Release
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            ext: ''
          - os: linux
            arch: arm64
            ext: ''
          - os: windows
            arch: amd64
            ext: '.exe'
          - os: darwin
            arch: amd64
            ext: ''
          - os: darwin
            arch: arm64
            ext: ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for changelog

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Get version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=$(git describe --tags --always --dirty)
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: Build binary
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 0
        run: |
          OUTPUT_NAME="paperless-uploader-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.ext }}"
          go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" \
            -o "build/${OUTPUT_NAME}" \
            ./cmd/paperless-uploader
          
          # Create checksum
          cd build
          sha256sum "${OUTPUT_NAME}" > "${OUTPUT_NAME}.sha256"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: paperless-uploader-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            build/paperless-uploader-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.ext }}
            build/paperless-uploader-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.ext }}.sha256

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: Generate changelog
        id: changelog
        run: |
          # Simple changelog generation - you can enhance this
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$PREVIOUS_TAG" ]; then
            CHANGELOG=$(git log $PREVIOUS_TAG..HEAD --pretty=format:"- %s" --no-merges)
          else
            CHANGELOG="Initial release"
          fi
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/*
          body: |
            ## Changes
            ${{ steps.changelog.outputs.changelog }}
            
            ## Installation
            
            Download the appropriate binary for your platform:
            - Linux (amd64): `paperless-uploader-linux-amd64`
            - Linux (arm64): `paperless-uploader-linux-arm64`
            - Windows (amd64): `paperless-uploader-windows-amd64.exe`
            - macOS (Intel): `paperless-uploader-darwin-amd64`
            - macOS (Apple Silicon): `paperless-uploader-darwin-arm64`
            
            Verify the download using the `.sha256` checksum files:
            ```bash
            sha256sum -c paperless-uploader-*.sha256
            ```
            
            ## Security
            
            All binaries have been scanned for security vulnerabilities using gosec and govulncheck.
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
