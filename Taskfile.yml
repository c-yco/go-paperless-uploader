# https://taskfile.dev

version: '3'

tasks:
  default:
    cmds:
      - task: build

  build:
    desc: "Build the application for different platforms"
    cmds:
      - task: build:linux
      - task: build:windows

  build:linux:
    desc: "Build the application for Linux (amd64)"
    cmds:
      - GOOS=linux GOARCH=amd64 go build -o build/paperless-uploader-linux-amd64 ./cmd/paperless-uploader
    silent: true

  build:windows:
    desc: "Build the application for Windows (amd64)"
    cmds:
      - GOOS=windows GOARCH=amd64 go build -o build/paperless-uploader-windows-amd64.exe ./cmd/paperless-uploader
    silent: true

  test:
    desc: "Run all tests"
    cmds:
      - go test -v ./...

  clean:
    desc: "Remove build artifacts"
    cmds:
      - rm -rf build

  dev:up:
    desc: "Start the development environment"
    cmds:
      - docker-compose -f dev-environment/docker-compose.yml --env-file dev-environment/docker-compose.env up -d
    silent: true

  dev:down:
    desc: "Stop the development environment"
    cmds:
      - docker-compose -f dev-environment/docker-compose.yml --env-file dev-environment/docker-compose.env down
    silent: true

  dev:logs:
    desc: "View the logs of the development environment"
    cmds:
      - docker-compose -f dev-environment/docker-compose.yml --env-file dev-environment/docker-compose.env logs -f
    silent: true

  version:current:
    desc: "Display the current version (latest git tag)"
    cmds:
      - echo "Current version:" $(git describe --tags --abbrev=0 2>/dev/null || echo "No version tag found")
    silent: false

  changelog:generate:
    desc: "Generate changelog for the next release"
    internal: true
    cmds:
      - |
        CURRENT=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        NEW_VERSION="{{.NEW_VERSION}}"
        DATE=$(date +%Y-%m-%d)
        
        # Initialize CHANGELOG.md if it doesn't exist
        if [ ! -f CHANGELOG.md ]; then
          echo "# Changelog" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)," >> CHANGELOG.md
          echo "and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html)." >> CHANGELOG.md
          echo "" >> CHANGELOG.md
        fi
        
        # Create temporary file with new entry
        {
          echo "## [$NEW_VERSION] - $DATE"
          echo ""
          echo "### Added"
          git log $CURRENT..HEAD --pretty=format:"- %s" --grep="^feat" --grep="^add" -i
          echo ""
          echo ""
          echo "### Changed"
          git log $CURRENT..HEAD --pretty=format:"- %s" --grep="^change" --grep="^update" -i
          echo ""
          echo ""
          echo "### Fixed"
          git log $CURRENT..HEAD --pretty=format:"- %s" --grep="^fix" --grep="^bug" -i
          echo ""
          echo ""
          echo "### Commits"
          git log $CURRENT..HEAD --pretty=format:"- %s (%h)" --no-merges
          echo ""
          echo ""
        } > /tmp/new_changelog_entry.md
        
        # Insert new entry after the header
        if grep -q "## \[" CHANGELOG.md; then
          # Find first version entry and insert before it
          sed -i "/## \[/r /tmp/new_changelog_entry.md" CHANGELOG.md
        else
          # No previous entries, append to end
          cat /tmp/new_changelog_entry.md >> CHANGELOG.md
        fi
        
        echo "Changelog updated for $NEW_VERSION"
        rm /tmp/new_changelog_entry.md

  version:patch:
    desc: "Bump patch version (X.Y.Z -> X.Y.Z+1) and update changelog"
    cmds:
      - |
        CURRENT=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "Current version: $CURRENT"
        NEW_VERSION=$(echo $CURRENT | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
        echo "New version: $NEW_VERSION"
        task changelog:generate NEW_VERSION=$NEW_VERSION
        git add CHANGELOG.md
        git commit -m "chore: update changelog for $NEW_VERSION" || echo "No changelog changes to commit"
        git tag -a $NEW_VERSION -m "Release $NEW_VERSION"
        echo "Tagged $NEW_VERSION. Push with: git push origin $NEW_VERSION"
    silent: false

  version:minor:
    desc: "Bump minor version (X.Y.Z -> X.Y+1.0) and update changelog"
    cmds:
      - |
        CURRENT=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "Current version: $CURRENT"
        NEW_VERSION=$(echo $CURRENT | awk -F. '{$2 = $2 + 1; $3 = 0; print $1"."$2"."$3}')
        echo "New version: $NEW_VERSION"
        task changelog:generate NEW_VERSION=$NEW_VERSION
        git add CHANGELOG.md
        git commit -m "chore: update changelog for $NEW_VERSION" || echo "No changelog changes to commit"
        git tag -a $NEW_VERSION -m "Release $NEW_VERSION"
        echo "Tagged $NEW_VERSION. Push with: git push origin $NEW_VERSION"
    silent: false

  version:major:
    desc: "Bump major version (X.Y.Z -> X+1.0.0) and update changelog"
    cmds:
      - |
        CURRENT=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "Current version: $CURRENT"
        NEW_VERSION=$(echo $CURRENT | awk -F. -v OFS='.' '{gsub(/v/, "", $1); print "v"$1+1, 0, 0}')
        echo "New version: $NEW_VERSION"
        task changelog:generate NEW_VERSION=$NEW_VERSION
        git add CHANGELOG.md
        git commit -m "chore: update changelog for $NEW_VERSION" || echo "No changelog changes to commit"
        git tag -a $NEW_VERSION -m "Release $NEW_VERSION"
        echo "Tagged $NEW_VERSION. Push with: git push origin $NEW_VERSION"
    silent: false

  release:create:
    desc: "Create a GitHub release from the latest tag"
    cmds:
      - |
        LATEST_TAG=$(git describe --tags --abbrev=0)
        echo "Creating GitHub release for $LATEST_TAG"
        git push origin $LATEST_TAG
        echo "Tag pushed to GitHub. A release will be created automatically if CI/CD is configured."
        echo "Otherwise, create manually at: https://github.com/c-yco/go-paperless-uploader/releases/new?tag=$LATEST_TAG"
    silent: false

  release:minor:
    desc: "Bump minor version and create GitHub release"
    cmds:
      - task: version:minor
      - task: release:create

  release:major:
    desc: "Bump major version and create GitHub release"
    cmds:
      - task: version:major
      - task: release:create

